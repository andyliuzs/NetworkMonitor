package testnet.andy.testnetworkstatus.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import testnet.andy.testnetworkstatus.db.greendao.entity.TrafficModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRAFFIC_MODEL".
*/
public class TrafficModelDao extends AbstractDao<TrafficModel, Integer> {

    public static final String TABLENAME = "TRAFFIC_MODEL";

    /**
     * Properties of entity TrafficModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "ID");
        public final static Property Date = new Property(1, long.class, "date", false, "DATE");
        public final static Property Gropby = new Property(2, String.class, "gropby", false, "GROPBY");
        public final static Property Rx = new Property(3, long.class, "rx", false, "RX");
        public final static Property Tx = new Property(4, long.class, "tx", false, "TX");
        public final static Property PackageName = new Property(5, String.class, "packageName", false, "PACKAGE_NAME");
    };


    public TrafficModelDao(DaoConfig config) {
        super(config);
    }
    
    public TrafficModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRAFFIC_MODEL\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"DATE\" INTEGER NOT NULL ," + // 1: date
                "\"GROPBY\" TEXT," + // 2: gropby
                "\"RX\" INTEGER NOT NULL ," + // 3: rx
                "\"TX\" INTEGER NOT NULL ," + // 4: tx
                "\"PACKAGE_NAME\" TEXT);"); // 5: packageName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRAFFIC_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TrafficModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getDate());
 
        String gropby = entity.getGropby();
        if (gropby != null) {
            stmt.bindString(3, gropby);
        }
        stmt.bindLong(4, entity.getRx());
        stmt.bindLong(5, entity.getTx());
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(6, packageName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TrafficModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getDate());
 
        String gropby = entity.getGropby();
        if (gropby != null) {
            stmt.bindString(3, gropby);
        }
        stmt.bindLong(4, entity.getRx());
        stmt.bindLong(5, entity.getTx());
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(6, packageName);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public TrafficModel readEntity(Cursor cursor, int offset) {
        TrafficModel entity = new TrafficModel( //
            cursor.getInt(offset + 0), // id
            cursor.getLong(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gropby
            cursor.getLong(offset + 3), // rx
            cursor.getLong(offset + 4), // tx
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // packageName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TrafficModel entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setDate(cursor.getLong(offset + 1));
        entity.setGropby(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRx(cursor.getLong(offset + 3));
        entity.setTx(cursor.getLong(offset + 4));
        entity.setPackageName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(TrafficModel entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(TrafficModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
